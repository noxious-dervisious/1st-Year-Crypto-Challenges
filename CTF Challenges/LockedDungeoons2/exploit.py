
from hashlib import sha256, md5
from pwn import *
from base64 import *
from string import printable as chars

def aes_cbc_bit_flip_attack(IV):
	present = "send_modflag_enc"
	desired = "aget_modflag_md5"

	present = list(present)
	desired = list(desired)
	IV = list(IV)

	for i in range (len(IV)):
		IV[i] = chr(ord(desired[i]) ^ ord(IV[i]) ^ ord(present[i]))
	return ''.join(IV)

def gen_xor(m_char,len_req):

	for re in range(256):
		if re ^ m_char == len_req:
			return re

def bruteforce(plaintext,plain_hash):

	for char in range(256):
		test = plaintext + chr(char)
		hash_ = md5(test).digest()
		if hash_ == plain_hash:
			return chr(char)

def exploit():

	plaintext = ''
	io = remote('localhost' , 6969)
	enc_mod_flag = io.recvline().strip()
	enc_mod_flag = base64.b64decode(enc_mod_flag)
	len_enc_flag = len(enc_mod_flag)
	IV = enc_mod_flag[:16]
	no_block = 1
	IV = aes_cbc_bit_flip_attack(IV)
	print(io.recvuntil('?'))
	flag = ''

	while flag != 'Dungeon goes deeper..\n':
		cipher = enc_mod_flag[16*no_block:]
		ciphertext = b64encode(IV + cipher)
		io.sendline(ciphertext)
		flag = io.recvline()
		no_block += 1
	print(flag.strip())
	io.recvline()

	for cipher_char in range(256):
		ciphertext = enc_mod_flag + 'a'*15 + chr(cipher_char) + 'a'*16
		ciphertext = base64.b64encode(ciphertext)
		io.sendline(ciphertext)
		recieved = io.recvuntil('\n')
		print(recieved)
		recieved = base64.b64decode(recieved).replace('\n','')
		if recieved == md5('s').digest():
			#print("true")
			plaintext += 's'
			break

	for m_char in range(256):
		pad_error = len_enc_flag + 31
		if cipher_char ^ m_char == pad_error:
			break

	for cur_len in range (pad_error-1,-1,-1):
		cipher_char = gen_xor(m_char,cur_len)
		print(cipher_char^m_char)
		ciphertext = enc_mod_flag + 'a'*15 + chr(cipher_char) + 'a'*16
		ciphertext = base64.b64encode(ciphertext).replace('\n','')
		io.sendline(ciphertext)
		recieved = io.recvline()
		print(recieved)
		recieved = base64.b64decode(recieved).replace('\n','')
		plaintext += bruteforce(plaintext,recieved)
		print(plaintext)

exploit()
